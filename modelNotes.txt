1024_AllClassesV6_Final.pt
    model = torchvision.models.detection.maskrcnn_resnet50_fpn_v2(weights='COCO_V1')

    #set the anchor box sizes
    anchor_generator = AnchorGenerator(
        sizes=(
            (32,), 
            (64,), 
            (128,), 
            (256,), 
            (512,),
        ),
        aspect_ratios=(
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
        )
    )
    rpn_head = RPNHead(model.backbone.out_channels, anchor_generator.num_anchors_per_location()[0],conv_depth=2)
    model.rpn.head = rpn_head
    model.rpn.anchor_generator = anchor_generator


    # get number of input features for the classifier
    in_features = model.roi_heads.box_predictor.cls_score.in_features
    print(in_features)
    # replace the pre-trained head with a new one
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)

    # now get the number of input features for the mask classifier
    in_features_mask = model.roi_heads.mask_predictor.conv5_mask.in_channels
    print(in_features_mask)
    hidden_layer = 256
    # and replace the mask predictor with a new one
    model.roi_heads.mask_predictor = MaskRCNNPredictor(
        in_features_mask,
        hidden_layer,
        num_classes
    )

    if strLabel == 'leaflet': intLabel = 1
    elif strLabel == 'petiole': intLabel = 2
    elif strLabel == 'folded_leaflet': intLabel = 3
    elif strLabel == 'pinched_leaflet': intLabel = 4

1024_AllClassesV7_Final.pt
    model = torchvision.models.detection.maskrcnn_resnet50_fpn_v2(weights='COCO_V1')
    # get number of input features for the classifier
    in_features = model.roi_heads.box_predictor.cls_score.in_features
    print(in_features)
    # replace the pre-trained head with a new one
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)

    # now get the number of input features for the mask classifier
    in_features_mask = model.roi_heads.mask_predictor.conv5_mask.in_channels
    print(in_features_mask)
    hidden_layer = 256
    # and replace the mask predictor with a new one
    model.roi_heads.mask_predictor = MaskRCNNPredictor(
        in_features_mask,
        hidden_layer,
        num_classes
    )

    if strLabel == 'leaflet': intLabel = 1
    elif strLabel == 'petiole': intLabel = 2
    elif strLabel == 'folded_leaflet': intLabel = 3
    elif strLabel == 'pinched_leaflet': intLabel = 4


1024_AllClassesV8_Final.pt
    model = torchvision.models.detection.maskrcnn_resnet50_fpn(weights="DEFAULT")
    # get number of input features for the classifier
    in_features = model.roi_heads.box_predictor.cls_score.in_features
    print(in_features)
    # replace the pre-trained head with a new one
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)

    # now get the number of input features for the mask classifier
    in_features_mask = model.roi_heads.mask_predictor.conv5_mask.in_channels
    print(in_features_mask)
    hidden_layer = 256
    # and replace the mask predictor with a new one
    model.roi_heads.mask_predictor = MaskRCNNPredictor(
        in_features_mask,
        hidden_layer,
        num_classes
    )

    if strLabel == 'leaflet': intLabel = 1
    elif strLabel == 'petiole': intLabel = 2
    elif strLabel == 'folded_leaflet': intLabel = 3
    elif strLabel == 'pinched_leaflet': intLabel = 4

1024_AllClassesV9_Final.pt
    model = torchvision.models.detection.maskrcnn_resnet50_fpn(weights="DEFAULT")
    #model = torchvision.models.detection.maskrcnn_resnet50_fpn_v2(weights='COCO_V1')

    #set the anchor box sizes
    anchor_generator = AnchorGenerator(
        sizes=(
            (32,), 
            (64,), 
            (128,), 
            (256,), 
            (512,),
        ),
        aspect_ratios=(
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
        )
    )
    rpn_head = RPNHead(model.backbone.out_channels, anchor_generator.num_anchors_per_location()[0],conv_depth=2)
    model.rpn.head = rpn_head
    model.rpn.anchor_generator = anchor_generator


    # get number of input features for the classifier
    in_features = model.roi_heads.box_predictor.cls_score.in_features
    print(in_features)
    # replace the pre-trained head with a new one
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)

    # now get the number of input features for the mask classifier
    in_features_mask = model.roi_heads.mask_predictor.conv5_mask.in_channels
    print(in_features_mask)
    hidden_layer = 256
    # and replace the mask predictor with a new one
    model.roi_heads.mask_predictor = MaskRCNNPredictor(
        in_features_mask,
        hidden_layer,
        num_classes
    )

    if strLabel == 'leaflet': intLabel = 1
    elif strLabel == 'petiole': intLabel = 2
    elif strLabel == 'folded_leaflet': intLabel = 3
    elif strLabel == 'pinched_leaflet': intLabel = 4

1024_AllClassesV10_Final.pt
    model = torchvision.models.detection.maskrcnn_resnet50_fpn(weights="DEFAULT")
    #model = torchvision.models.detection.maskrcnn_resnet50_fpn_v2(weights='COCO_V1')

    #set the anchor box sizes
    anchor_generator = AnchorGenerator(
        sizes=(
            (32,), 
            (64,), 
            (128,), 
            (256,), 
            (512,),
        ),
        aspect_ratios=(
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
            (0.25, 0.5, 1.0, 2.0, 3.0, 4.0),
        )
    )
    # get number of input features for the classifier
    in_features = model.roi_heads.box_predictor.cls_score.in_features
    print(in_features)
    # replace the pre-trained head with a new one
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)

    # now get the number of input features for the mask classifier
    in_features_mask = model.roi_heads.mask_predictor.conv5_mask.in_channels
    print(in_features_mask)
    hidden_layer = 256
    # and replace the mask predictor with a new one
    model.roi_heads.mask_predictor = MaskRCNNPredictor(
        in_features_mask,
        hidden_layer,
        num_classes
    )

    if strLabel == 'leaflet': intLabel = 1
    elif strLabel == 'petiole': intLabel = 2
    elif strLabel == 'folded_leaflet': intLabel = 3
    elif strLabel == 'pinched_leaflet': intLabel = 4
    
1024_MergedBadV1.pt and 1024_MergedbadV2
    model = torchvision.models.detection.maskrcnn_resnet50_fpn_v2(weights='COCO_V1')
    in_features = model.roi_heads.box_predictor.cls_score.in_features
    print(in_features)
    # replace the pre-trained head with a new one
    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)

    # now get the number of input features for the mask classifier
    in_features_mask = model.roi_heads.mask_predictor.conv5_mask.in_channels
    print(in_features_mask)
    hidden_layer = 256
    # and replace the mask predictor with a new one
    model.roi_heads.mask_predictor = MaskRCNNPredictor(
        in_features_mask,
        hidden_layer,
        num_classes
    )
    if strLabel == 'leaflet': intLabel = 1
    elif strLabel == 'petiole': intLabel = 0
    elif strLabel == 'folded_leaflet': intLabel = 2
    elif strLabel == 'pinched_leaflet': intLabel = 2
